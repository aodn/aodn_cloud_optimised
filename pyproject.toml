[build-system]
requires = ["poetry-core>1.0.0", "wheel"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "aodn-cloud-optimised"
version = "0.1.31"
description = "Cloud optimised data formats for IMOS NetCDF files and CSVs."
authors = ["lbesnard <laurent.besnard@utas.edu.au>"]
license = "GNU General Public License v3.0"
readme = "README.md"
keywords = ["cloud", "data", "NetCDF", "CSV", "Zarr", "Parquet"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
]


[tool.poetry.urls]
"Source code" = "https://github.com/aodn/aodn_cloud_optimised"


[tool.poetry.dependencies]
python = ">=3.10, <4.0"
netCDF4 = "==1.6.5"  # hardpinned because of bug https://github.com/Unidata/netcdf4-python/issues/1342
numpy = "<2.0.0"  # new version created issue similar to https://github.com/Sinaptik-AI/pandas-ai/issues/1251 only visible when opening with xarray some NetCDF. but not visible with dask although empty data NaN is created
pandas = ">=2.2.3"
python-dateutil = ">=2.9.0"
jsonschema = ">=4.22.0"
h5py = "==3.11.0"  # libmamba cant install 3.12.1 on coiled!
h5netcdf = ">=1.3.0"
scipy = ">=1.13.0"
boto3 = ">=1.34.162"
pyarrow = "==17.0.0"
rechunker = ">=0.5.2"
s3fs = ">=2024.9.0"
shapely = ">=2.0.4"
xarray = { version = "==2024.9.0", extras = ["complete"] }
zarr = ">=2.18.3"
geopandas = ">=0.14.4"
coiled = ">=1.53.0"
dask-cloudprovider = ">=2024.9.1"
dask = ">=2024.9.1"
dask-expr = ">=1.1.15"  # needs to be added for coiled otherwise an old version is used and not updated
colorama = ">=0.4.6"
s3path = ">=0.5.7"
python-levenshtein = "^0.25.1"

[tool.poetry.dev-dependencies]
pytest = "^8.2.1"
ipdb = "^0.13"
ipython = "^7.5.3"
coverage = "^7.5.3"
pre-commit = "^3.7.1"
moto = {version = ">=5.0.0", extras = ["ec2", "s3",  "server", "all"]}  # Add Moto with optional dependencies
fuzzywuzzy = ">=0.18.0"
sphinx = ">=7.3.7"
poetry-pre-commit-plugin = "^0.1.2"
asciinema = ">=2.4.0"  # to record terminal sessions, useful for documentation
matplotlib = "^3.9.1"
cartopy = ">=0.23.0"
termcolor = "^2.4.0"
nbformat = "^5.10.4"
gsw = ">=3.6.19"
seaborn = ">=0.13.2"
windrose = ">=1.9.2"


#[tool.poetry.extras]
#testing = ["pytest", "ipython", "ipdb"]
#interactive = ["pytest", "ipython", "ipdb"]


[tool.poetry.scripts]
#cloud_optimised_srs_oc_ljco_to_parquet = "aodn_cloud_optimised.bin.srs_oc_ljco_to_parquet:main"
cloud_optimised_argo = "aodn_cloud_optimised.bin.argo:main"
cloud_optimised_autonomous_underwater_vehicle = "aodn_cloud_optimised.bin.autonomous_underwater_vehicle:main"
cloud_optimised_create_aws_registry_dataset = "aodn_cloud_optimised.bin.create_aws_registry_dataset:main"
cloud_optimised_create_dataset_config = "aodn_cloud_optimised.bin.create_dataset_config:main"
cloud_optimised_model_sea_level_anomaly_gridded_realtime = "aodn_cloud_optimised.bin.model_sea_level_anomaly_gridded_realtime:main"
cloud_optimised_mooring_ctd_delayed_qc = "aodn_cloud_optimised.bin.mooring_ctd_delayed_qc:main"
cloud_optimised_mooring_hourly_timeseries_delayed_qc = "aodn_cloud_optimised.bin.mooring_hourly_timeseries_delayed_qc:main"
cloud_optimised_mooring_satellite_altimetry_calibration_validation = "aodn_cloud_optimised.bin.mooring_satellite_altimetry_calibration_validation:main"
cloud_optimised_mooring_temperature_logger_delayed_qc = "aodn_cloud_optimised.bin.mooring_temperature_logger_delayed_qc:main"
cloud_optimised_radar_BonneyCoast_velocity_hourly_averaged_delayed_qc = "aodn_cloud_optimised.bin.radar_BonneyCoast_velocity_hourly_averaged_delayed_qc:main"
cloud_optimised_radar_CapricornBunkerGroup_velocity_hourly_averaged_delayed_qc = "aodn_cloud_optimised.bin.radar_CapricornBunkerGroup_velocity_hourly_averaged_delayed_qc:main"
cloud_optimised_radar_CapricornBunkerGroup_wave_delayed_qc = "aodn_cloud_optimised.bin.radar_CapricornBunkerGroup_wave_delayed_qc:main"
cloud_optimised_radar_CapricornBunkerGroup_wind_delayed_qc = "aodn_cloud_optimised.bin.radar_CapricornBunkerGroup_wind_delayed_qc:main"
cloud_optimised_radar_CoffsHarbour_velocity_hourly_averaged_delayed_qc = "aodn_cloud_optimised.bin.radar_CoffsHarbour_velocity_hourly_averaged_delayed_qc:main"
cloud_optimised_radar_CoffsHarbour_wave_delayed_qc = "aodn_cloud_optimised.bin.radar_CoffsHarbour_wave_delayed_qc:main"
cloud_optimised_radar_CoffsHarbour_wind_delayed_qc = "aodn_cloud_optimised.bin.radar_CoffsHarbour_wind_delayed_qc:main"
cloud_optimised_radar_CoralCoast_velocity_hourly_averaged_delayed_qc = "aodn_cloud_optimised.bin.radar_CoralCoast_velocity_hourly_averaged_delayed_qc:main"
cloud_optimised_radar_Newcastle_velocity_hourly_averaged_delayed_qc = "aodn_cloud_optimised.bin.radar_Newcastle_velocity_hourly_averaged_delayed_qc:main"
cloud_optimised_radar_NorthWestShelf_velocity_hourly_averaged_delayed_qc = "aodn_cloud_optimised.bin.radar_NorthWestShelf_velocity_hourly_averaged_delayed_qc:main"
cloud_optimised_radar_RottnestShelf_velocity_hourly_averaged_delayed_qc = "aodn_cloud_optimised.bin.radar_RottnestShelf_velocity_hourly_averaged_delayed_qc:main"
cloud_optimised_radar_RottnestShelf_wave_delayed_qc = "aodn_cloud_optimised.bin.radar_RottnestShelf_wave_delayed_qc:main"
cloud_optimised_radar_RottnestShelf_wind_delayed_qc = "aodn_cloud_optimised.bin.radar_RottnestShelf_wind_delayed_qc:main"
cloud_optimised_radar_SouthAustraliaGulfs_velocity_hourly_averaged_delayed_qc = "aodn_cloud_optimised.bin.radar_SouthAustraliaGulfs_velocity_hourly_averaged_delayed_qc:main"
cloud_optimised_radar_SouthAustraliaGulfs_wave_delayed_qc = "aodn_cloud_optimised.bin.radar_SouthAustraliaGulfs_wave_delayed_qc:main"
cloud_optimised_radar_SouthAustraliaGulfs_wind_delayed_qc = "aodn_cloud_optimised.bin.radar_SouthAustraliaGulfs_wind_delayed_qc:main"
cloud_optimised_radar_TurquoiseCoast_velocity_hourly_averaged_delayed_qc = "aodn_cloud_optimised.bin.radar_TurquoiseCoast_velocity_hourly_averaged_delayed_qc:main"
cloud_optimised_receiver_animal_acoustic_tagging_delayed_qc = "aodn_cloud_optimised.bin.receiver_animal_acoustic_tagging_delayed_qc:main"
cloud_optimised_satellite_chlorophylla_carder_1day_aqua = "aodn_cloud_optimised.bin.satellite_chlorophylla_carder_1day_aqua:main"
cloud_optimised_satellite_chlorophylla_gsm_1day_aqua = "aodn_cloud_optimised.bin.satellite_chlorophylla_gsm_1day_aqua:main"
cloud_optimised_satellite_chlorophylla_oc3_1day_aqua = "aodn_cloud_optimised.bin.satellite_chlorophylla_oc3_1day_aqua:main"
cloud_optimised_satellite_chlorophylla_oci_1day_aqua = "aodn_cloud_optimised.bin.satellite_chlorophylla_oci_1day_aqua:main"
cloud_optimised_satellite_diffuse_attenuation_coefficent_1day_aqua = "aodn_cloud_optimised.bin.satellite_diffuse_attenuation_coefficent_1day_aqua:main"
cloud_optimised_satellite_ghrsst_l3c_1day_nighttime_himawari8 = "aodn_cloud_optimised.bin.satellite_ghrsst_l3c_1day_nighttime_himawari8:main"
cloud_optimised_satellite_ghrsst_l3s_1day_daynighttime_multi_sensor_southernocean = "aodn_cloud_optimised.bin.satellite_ghrsst_l3s_1day_daynighttime_multi_sensor_southernocean:main"
cloud_optimised_satellite_ghrsst_l3s_1day_daynighttime_single_sensor_australia = "aodn_cloud_optimised.bin.satellite_ghrsst_l3s_1day_daynighttime_single_sensor_australia:main"
cloud_optimised_satellite_ghrsst_l3s_1day_daynighttime_single_sensor_southernocean = "aodn_cloud_optimised.bin.satellite_ghrsst_l3s_1day_daynighttime_single_sensor_southernocean:main"
cloud_optimised_satellite_ghrsst_l3s_1day_nighttime_geopolar_multi_sensor_australia = "aodn_cloud_optimised.bin.satellite_ghrsst_l3s_1day_nighttime_geopolar_multi_sensor_australia:main"
cloud_optimised_satellite_ghrsst_l3s_3day_daynighttime_single_sensor_australia = "aodn_cloud_optimised.bin.satellite_ghrsst_l3s_3day_daynighttime_single_sensor_australia:main"
cloud_optimised_satellite_ghrsst_l4_gamssa_1day_multi_sensor_world = "aodn_cloud_optimised.bin.satellite_ghrsst_l4_gamssa_1day_multi_sensor_world:main"
cloud_optimised_satellite_ghrsst_l4_ramssa_1day_multi_sensor_australia = "aodn_cloud_optimised.bin.satellite_ghrsst_l4_ramssa_1day_multi_sensor_australia:main"
cloud_optimised_satellite_nanoplankton_fraction_oc3_1day_aqua = "aodn_cloud_optimised.bin.satellite_nanoplankton_fraction_oc3_1day_aqua:main"
cloud_optimised_satellite_net_primary_productivity_gsm_1day_aqua = "aodn_cloud_optimised.bin.satellite_net_primary_productivity_gsm_1day_aqua:main"
cloud_optimised_satellite_net_primary_productivity_oc3_1day_aqua = "aodn_cloud_optimised.bin.satellite_net_primary_productivity_oc3_1day_aqua:main"
cloud_optimised_satellite_optical_water_type_1day_aqua = "aodn_cloud_optimised.bin.satellite_optical_water_type_1day_aqua:main"
cloud_optimised_satellite_picoplankton_fraction_oc3_1day_aqua = "aodn_cloud_optimised.bin.satellite_picoplankton_fraction_oc3_1day_aqua:main"
cloud_optimised_slocum_glider_delayed_qc = "aodn_cloud_optimised.bin.slocum_glider_delayed_qc:main"
cloud_optimised_vessel_air_sea_flux_product_delayed = "aodn_cloud_optimised.bin.vessel_air_sea_flux_product_delayed:main"
cloud_optimised_vessel_air_sea_flux_sst_meteo_realtime = "aodn_cloud_optimised.bin.vessel_air_sea_flux_sst_meteo_realtime:main"
cloud_optimised_vessel_co2_delayed_qc = "aodn_cloud_optimised.bin.vessel_co2_delayed_qc:main"
cloud_optimised_vessel_fishsoop_realtime_qc = "aodn_cloud_optimised.bin.vessel_fishsoop_realtime_qc:main"
cloud_optimised_vessel_sst_delayed_qc = "aodn_cloud_optimised.bin.vessel_sst_delayed_qc:main"
cloud_optimised_vessel_trv_realtime_qc = "aodn_cloud_optimised.bin.vessel_trv_realtime_qc:main"
cloud_optimised_vessel_xbt_delayed_qc = "aodn_cloud_optimised.bin.vessel_xbt_delayed_qc:main"
cloud_optimised_vessel_xbt_realtime_nonqc = "aodn_cloud_optimised.bin.vessel_xbt_realtime_nonqc:main"
cloud_optimised_wave_buoy_realtime_nonqc = "aodn_cloud_optimised.bin.wave_buoy_realtime_nonqc:main"
generic_cloud_optimised_creation = "aodn_cloud_optimised.bin.generic_cloud_optimised_creation:main"

#[tool.poetry.include]
#data = ["aodn_cloud_optimised/config/*.json", "aodn_cloud_optimised/config/dataset/*.json"]

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.1"
ipdb = "^0.13"
ipython = "^7.5.3"
coverage = "^7.5.3"
pre-commit = "^3.7.1"
moto = {version = ">=5.0.0", extras = ["ec2", "s3",  "server", "all"]}  # Add Moto with optional dependencies
fuzzywuzzy = ">=0.18.0"
sphinx = ">=7.3.7"
poetry-pre-commit-plugin = "^0.1.2"
asciinema = ">=2.4.0"  # to record terminal sessions, useful for documentation
matplotlib = "^3.9.1"
termcolor = "^2.4.0"
nbformat = "^5.10.4"
cartopy = "^0.23.0"
gsw = ">=3.6.19"


[tool.pre_commit]
version = "2.3.0"
config = ".pre-commit-config.yaml"

[tool.pytest.ini_options]
# Other pytest settings can go here
addopts = "--ignore=integration_testing"
